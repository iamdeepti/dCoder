{"version":3,"sources":["components/layout/Caesar.js","components/layout/Affine.js","components/layout/Substitution.js","components/pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Caesar","state","text","key","result","setText","e","temp","target","value","replace","toLowerCase","setState","setKey","x","parseInt","encrypt","preventDefault","str","i","length","charCodeAt","String","fromCharCode","decrypt","Container","Form","Group","Label","Control","as","rows","onChange","this","type","ButtonGroup","Button","onClick","defaultValue","readOnly","Component","mp","Map","set","a","b","setKey1","setKey2","has","get","Row","Col","console","log","clear","charAt","Home","K","Tabs","id","activeKey","onSelect","k","Tab","eventKey","title","Affine","Substitution","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9fb39c30.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Container, Form, Button, ButtonGroup } from \"react-bootstrap\";\nclass Caesar extends Component {\n  state = {\n    text: \"\",\n    key: null,\n    result: \"\",\n  };\n  setText = (e) => {\n    var temp = e.target.value;\n    temp = temp.replace(/ /g, \"\");\n    temp = temp.replace(/'/g, \"\");\n    temp = temp.replace(/\\./g, \"\");\n    temp = temp.replace(/,/g, \"\");\n    temp = temp.replace(/\\?/g, \"\");\n    temp = temp.toLowerCase();\n    this.setState({ text: temp, result: \"\" });\n  };\n  setKey = (e) => {\n    var x = parseInt(e.target.value);\n    this.setState({ key: x, result: \"\" });\n  };\n  encrypt = (e) => {\n    e.preventDefault();\n    var temp,\n      str = \"\";\n    for (var i = 0; i < this.state.text.length; i++) {\n      temp = ((this.state.text.charCodeAt(i) - 97 + this.state.key) % 26) + 97;\n      str += String.fromCharCode(temp);\n    }\n    this.setState({ result: str });\n  };\n  decrypt = (e) => {\n    e.preventDefault();\n    var temp,\n      str = \"\";\n    for (var i = 0; i < this.state.text.length; i++) {\n      temp =\n        ((this.state.text.charCodeAt(i) - 97 - this.state.key + 26) % 26) + 97;\n      str += String.fromCharCode(temp);\n    }\n    this.setState({ result: str });\n  };\n  render() {\n    return (\n      <div>\n        <Container>\n          <p>\n            In Caesar Cipher,each letter in the plaintext is replaced by a\n            letter some fixed number of positions down the alphabet\n          </p>\n          <Form>\n            <Form.Group>\n              <Form.Label>Enter Plain Text/ Cipher Text</Form.Label>\n              <Form.Control as=\"textarea\" rows=\"3\" onChange={this.setText} />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Enter Key </Form.Label>\n              <Form.Control type=\"text\" onChange={this.setKey} />\n            </Form.Group>\n            <Form.Group>\n              <ButtonGroup>\n                <Button type=\"submit\" onClick={this.encrypt}>\n                  Encrypt\n                </Button>\n                <Button type=\"submit\" onClick={this.decrypt}>\n                  Decrypt\n                </Button>\n              </ButtonGroup>\n            </Form.Group>\n            {this.state.result.length !== 0 && (\n              <Form.Group>\n                <Form.Label>Result </Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  defaultValue={this.state.result}\n                  readOnly\n                ></Form.Control>\n              </Form.Group>\n            )}\n          </Form>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Caesar;\n","import React, { Component } from \"react\";\nimport { Container, Form, Button, ButtonGroup, Col } from \"react-bootstrap\";\nvar mp = new Map();\nmp.set(1, 1);\nmp.set(3, 9);\nmp.set(5, 21);\nmp.set(7, 15);\nmp.set(9, 3);\nmp.set(11, 19);\nmp.set(15, 7);\nmp.set(17, 23);\nmp.set(19, 11);\nmp.set(21, 5);\nmp.set(23, 17);\nmp.set(25, 25);\n\nclass Caesar extends Component {\n  state = {\n    text: \"\",\n    a: null,\n    b: null,\n    result: \"\",\n  };\n\n  setText = (e) => {\n    this.setState({ result: \"\" });\n    var temp = e.target.value;\n    temp = temp.replace(/ /g, \"\");\n    temp = temp.replace(/'/g, \"\");\n    temp = temp.replace(/\\./g, \"\");\n    temp = temp.replace(/,/g, \"\");\n    temp = temp.replace(/\\?/g, \"\");\n    temp = temp.toLowerCase();\n    this.setState({ text: temp });\n  };\n  setKey1 = (e) => {\n    var x = parseInt(e.target.value);\n    this.setState({ a: x });\n  };\n  setKey2 = (e) => {\n    this.setState({ result: \"\" });\n\n    var x = parseInt(e.target.value);\n    this.setState({ b: x });\n  };\n\n  encrypt = (e) => {\n    e.preventDefault();\n    this.setState({ result: \"\" });\n\n    var a = this.state.a,\n      b = this.state.b;\n\n    var temp,\n      str = \"\";\n    for (var i = 0; i < this.state.text.length; i++) {\n      var x = this.state.text.charCodeAt(i) - 97;\n      temp = ((x * a + b) % 26) + 97;\n      str += String.fromCharCode(temp);\n    }\n    this.setState({ result: str });\n  };\n  decrypt = (e) => {\n    e.preventDefault();\n    this.setState({ result: \"\" });\n    var a = this.state.a,\n      b = this.state.b;\n    var temp,\n      str = \"\";\n    if (!mp.has(a)) {\n      this.setState({\n        result: \"Can't be computed gcd of a and 26 should be 1\",\n      });\n    } else {\n      a = mp.get(a);\n      for (var i = 0; i < this.state.text.length; i++) {\n        var x = this.state.text.charCodeAt(i) - 97;\n        temp = ((((x - b + 26) % 26) * a) % 26) + 97;\n        str += String.fromCharCode(temp);\n      }\n      this.setState({ result: str });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <Container>\n          <p>Affine cipher is of the from E(x) = (ax + b) mod 26</p>\n          <Form>\n            <Form.Group>\n              <Form.Label>Enter Plain Text/ Cipher Text</Form.Label>\n              <Form.Control as=\"textarea\" rows=\"3\" onChange={this.setText} />\n            </Form.Group>\n            <Form.Group>\n              <Form.Row>\n                <Col>\n                  <Form.Label>Enter Key a</Form.Label>\n                  <Form.Control type=\"text\" onChange={this.setKey1} />\n                </Col>\n                <Col>\n                  <Form.Label>Enter Key b</Form.Label>\n                  <Form.Control type=\"text\" onChange={this.setKey2} />\n                </Col>\n              </Form.Row>\n            </Form.Group>\n            <Form.Group>\n              <ButtonGroup>\n                <Button type=\"submit\" onClick={this.encrypt}>\n                  Encrypt\n                </Button>\n                <Button type=\"submit\" onClick={this.decrypt}>\n                  Decrypt\n                </Button>\n              </ButtonGroup>\n            </Form.Group>\n            {this.state.result.length !== 0 && (\n              <Form.Group>\n                <Form.Label>Result </Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  defaultValue={this.state.result}\n                  readOnly\n                ></Form.Control>\n              </Form.Group>\n            )}\n          </Form>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Caesar;\n","import React, { Component } from \"react\";\nimport { Container, Form, Button, ButtonGroup } from \"react-bootstrap\";\nvar mp = new Map();\nclass Caesar extends Component {\n  state = {\n    text: \"\",\n    key: \"\",\n    result: \"\",\n  };\n  setText = (e) => {\n    var temp = e.target.value;\n    temp = temp.replace(/ /g, \"\");\n    temp = temp.replace(/'/g, \"\");\n    temp = temp.replace(/\\./g, \"\");\n    temp = temp.replace(/,/g, \"\");\n    temp = temp.replace(/\\?/g, \"\");\n    temp = temp.toLowerCase();\n    this.setState({ text: temp, result: \"\" });\n  };\n  setKey = (e) => {\n    console.log(e.target.value);\n    this.setState({ key: e.target.value.toLowerCase(), result: \"\" });\n  };\n  encrypt = (e) => {\n    e.preventDefault();\n    mp.clear();\n    for (var i = 0; i < 26; i++) {\n      mp.set(String.fromCharCode(i + 97), this.state.key.charAt(i));\n    }\n    var str = \"\";\n    for (var i = 0; i < this.state.text.length; i++) {\n      str += mp.get(this.state.text.charAt(i));\n    }\n    this.setState({ result: str });\n  };\n  decrypt = (e) => {\n    e.preventDefault();\n    mp.clear();\n    for (var i = 0; i < 26; i++) {\n      mp.set(this.state.key.charAt(i), String.fromCharCode(i + 97));\n    }\n    var str = \"\";\n    for (var i = 0; i < this.state.text.length; i++) {\n      str += mp.get(this.state.text.charAt(i));\n    }\n    this.setState({ result: str });\n  };\n  render() {\n    return (\n      <div>\n        <Container>\n          <p>\n            It is an improvement to the Caesar Cipher. Instead of shifting the\n            alphabets by some number, this scheme uses some permutation of the\n            letters in alphabet.\n          </p>\n          <Form>\n            <Form.Group>\n              <Form.Label>Enter Plain Text/ Cipher Text</Form.Label>\n              <Form.Control as=\"textarea\" rows=\"3\" onChange={this.setText} />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Enter Key </Form.Label>\n              <Form.Control type=\"text\" onChange={this.setKey} />\n            </Form.Group>\n            <Form.Group>\n              <ButtonGroup>\n                <Button type=\"submit\" onClick={this.encrypt}>\n                  Encrypt\n                </Button>\n                <Button type=\"submit\" onClick={this.decrypt}>\n                  Decrypt\n                </Button>\n              </ButtonGroup>\n            </Form.Group>\n            {this.state.result.length !== 0 && (\n              <Form.Group>\n                <Form.Label>Result </Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  defaultValue={this.state.result}\n                  readOnly\n                ></Form.Control>\n              </Form.Group>\n            )}\n          </Form>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Caesar;\n","import React, { Component } from \"react\";\nimport { Container, Tabs, Tab } from \"react-bootstrap\";\nimport Caesar from \"../layout/Caesar\";\nimport Affine from \"../layout/Affine\";\nimport Substitution from \"../layout/Substitution\";\nclass Home extends Component {\n  state = {\n    key: \"Caesar\",\n  };\n  setKey = (K) => {\n    this.setState({ key: K });\n  };\n  render() {\n    return (\n      <Container>\n        <br />\n        <h1>Dcoder</h1>\n        <h3>A tool for Cryptography</h3>\n        <p>\n          {\" \"}\n          Dcoder, as the name suggests, decodes or encodes all popular\n          encodings.\n        </p>\n        <Tabs\n          id=\"controlled-tab-example\"\n          activeKey={this.state.key}\n          onSelect={(k) => this.setKey(k)}\n        >\n          <Tab eventKey=\"Caesar\" title=\"Caesar\">\n            <Caesar />\n          </Tab>\n          <Tab eventKey=\"Affine\" title=\"Affine\">\n            <Affine />\n          </Tab>\n          <Tab eventKey=\"Substituion\" title=\"Substituion\">\n            <Substitution />\n          </Tab>\n        </Tabs>\n      </Container>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Home from './components/pages/Home';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}